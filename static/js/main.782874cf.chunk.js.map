{"version":3,"sources":["logo.svg","CryptoList.js","Crypto.js","App.js","reportWebVitals.js","index.js"],"names":["lastTrend","CryptoList","props","checkRefresh","cryptoList","forEach","cryptoObj","newCurrencyObj","oldCurrencyObj","oldCryptoList","find","el","symbol","undefined","last","liElements","map","trendSymbol","trendClass","String","fromCharCode","push","length","className","Crypto","getCryptoData","axios","get","mode","then","res","newCryptoList","element","data","setState","prevState","filterCryptoList","inputFilter","value","trim","toUpperCase","filteredCryptoList","filter","elem","includes","state","this","rateRefresh","setInterval","clearInterval","ref","onChange","type","placeholder","Component","App","src","logo","alt","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.782874cf.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.d4b73bbb.svg\";","import React from 'react';\r\nimport './CryptoList.css'\r\n\r\nlet lastTrend = [];\r\n\r\nconst CryptoList = (props) => {\r\n \r\n    let checkRefresh = false;\r\n\r\n    props.cryptoList.forEach(function(cryptoObj) {\r\n\r\n        let newCurrencyObj = cryptoObj;\r\n        let oldCurrencyObj = props.oldCryptoList.find(el => el.symbol === newCurrencyObj.symbol);\r\n\r\n        if (oldCurrencyObj !== undefined) {\r\n            if (newCurrencyObj.last !== oldCurrencyObj.last) {\r\n                checkRefresh = true;\r\n                lastTrend = [];\r\n            }\r\n        }\r\n    });\r\n\r\n    let liElements = props.cryptoList.map((cryptoObj) => {\r\n\r\n        let newCurrencyObj = cryptoObj;\r\n        \r\n        let trendSymbol = \"\";\r\n        let trendClass = \"\";\r\n\r\n        if (checkRefresh === true) {\r\n\r\n            let oldCurrencyObj = props.oldCryptoList.find(el => el.symbol === newCurrencyObj.symbol);\r\n\r\n            if (oldCurrencyObj !== undefined) {\r\n                if (newCurrencyObj.last > oldCurrencyObj.last) {\r\n                    trendSymbol = \" \" + String.fromCharCode(8593);\r\n                    trendClass = \"rate-up\";\r\n                    checkRefresh = true;\r\n                    lastTrend.push({'symbol': newCurrencyObj.symbol, 'trendSymbol': trendSymbol, 'trendClass': trendClass})\r\n                } else if (newCurrencyObj.last < oldCurrencyObj.last) {\r\n                    trendSymbol = \" \" + String.fromCharCode(8595);\r\n                    trendClass = \"rate-down\";\r\n                    checkRefresh = true;\r\n                    lastTrend.push({'symbol': newCurrencyObj.symbol, 'trendSymbol': trendSymbol, 'trendClass': trendClass})\r\n                } else if (newCurrencyObj.last === oldCurrencyObj.last) {\r\n                    trendSymbol = \" \" + String.fromCharCode(8596);\r\n                    trendClass = \"rate-nochange\";\r\n                    lastTrend.push({'symbol': newCurrencyObj.symbol, 'trendSymbol': trendSymbol, 'trendClass': trendClass})\r\n                }\r\n            }\r\n\r\n        } else {\r\n            \r\n            if (lastTrend.length > 0) {\r\n\r\n                let oldCurrencyObj = lastTrend.find(el => el.symbol === newCurrencyObj.symbol);\r\n\r\n                if (oldCurrencyObj !== undefined) {\r\n                    trendSymbol = oldCurrencyObj.trendSymbol;\r\n                    trendClass = oldCurrencyObj.trendClass;\r\n                }\r\n            }\r\n        }\r\n\r\n        return (\r\n            <li key={cryptoObj.symbol}>\r\n                <span className=\"crypto-label\">Last rate:</span>\r\n                <span className={\"crypto-rate \" + trendClass}>{newCurrencyObj.last}{trendSymbol}</span>\r\n                <span className=\"currency-ticker\">{newCurrencyObj.symbol}</span>\r\n            </li>\r\n        );\r\n    });\r\n\r\n    return (\r\n        <div className=\"crypto-list\">\r\n            <ul className=\"list\">\r\n                {liElements}\r\n            </ul>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CryptoList;","import React, {Component} from 'react';\r\nimport './Crypto.css'\r\nimport axios from 'axios';\r\nimport CryptoList from './CryptoList';\r\n\r\nclass Crypto extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            oldCryptoList: [],\r\n            cryptoList: [],\r\n            filteredCryptoList: [],\r\n        };\r\n    }\r\n    \r\n    getCryptoData = () => {\r\n        axios.get('https://blockchain.info/ticker', {mode: 'cors'})\r\n        .then(res => {\r\n            let newCryptoList = [];\r\n            for (let element in res.data) {\r\n                newCryptoList.push(res.data[element]);\r\n            }\r\n\r\n            this.setState((prevState) => {\r\n    \r\n                return({\r\n                    oldCryptoList: prevState.cryptoList,\r\n                    cryptoList: newCryptoList,\r\n                })\r\n                \r\n            });\r\n\r\n            this.filterCryptoList();\r\n        });\r\n        \r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getCryptoData();\r\n        this.rateRefresh = setInterval(() => this.getCryptoData(), 5000);\r\n    }\r\n\r\n    \r\n    componentWillUnmount() {\r\n        clearInterval(this.rateRefresh);\r\n    }\r\n\r\n    filterCryptoList = () => {\r\n        this.inputFilter.value = this.inputFilter.value.trim().toUpperCase();\r\n        this.setState((prevState) => {\r\n            \r\n            let newFilteredCryptoList = prevState.cryptoList.filter((elem) => {\r\n                return(elem.symbol.includes(this.inputFilter.value));\r\n            });\r\n           \r\n            return({filteredCryptoList: newFilteredCryptoList});\r\n\r\n        });\r\n    }\r\n    \r\n    render() {\r\n        return(\r\n            <div className=\"crypto\">\r\n                <input ref={element => this.inputFilter = element} onChange={this.filterCryptoList} type=\"text\" placeholder=\"Filter\"></input>\r\n                <CryptoList cryptoList={this.state.filteredCryptoList} oldCryptoList = {this.state.oldCryptoList} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Crypto;\r\n","import logo from './logo.svg';\nimport './App.css';\n\nimport Crypto from './Crypto';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <h1>Crypto Rate</h1>\n      </header>\n      <Crypto />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}